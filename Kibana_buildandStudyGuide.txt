Build process :
1. Extract the Elastic Search and move to bin folder and run elasticsearch.bat 
2. Extract the kibana 
3. move to conf folder and uncomment the elasticsearch.url so that it can connect to elastic search at that ip 
4.kibana by default will start at 5601 
5. Download logstash and extract it 
6. Make one folder for data and conf file location where data and conf will be stored .
7. create a <filename>.conf
Structre will be like this :
input {
     file {
	     path => "C:\Users\AS51266\Downloads\data\cars.csv"
	     start_position => "beginning"
		 sincedb_path => "NUL"
	 }
}
filter {
      csv {
	      separator => ","
		  
		  columns => ["maker","model","mileage","manufacture_year","engine_displacement","engine_power","body_type","color_slug","stk_year","transmission","door_count","seat_count","fuel_type","date_created"	,"date_last_seen","price_eur"]
	  }
	  mutate { convert => ["mileage" , "integer"]}
      mutate { convert => ["price_eur" , "float"]}
	  mutate { convert => ["engine_power" , "integer"]}
	  mutate { convert => ["door_count" , "integer"]}
	  mutate { convert => ["seat_count" , "integer"]}
  }
  output
  {
       elasticsearch {
	          hosts => "localhost"
			  index => "cars"
			  document_type => "sold_cars"
	   }
	   stdout {
	      codec => rubydebug 
	   }
  }


8. Then move to folder location bin and run the folowing command :
logstash -f <Conf file location>


Kibana Console commands  in elastic search :


1.
PUT /{index name}/{type}/{id}
{
  "fied1": value1,
  "field2":value2
  ....
}

eg 
PUT /vehicles/car/124

{
    "make": "Honda",
    "Colour": "Black",
    "HP": 2506,
    "milage": 24000,
    "price": 1935.67
}

result :
{
  "_index": "vehicles",
  "_type": "car",
  "_id": "124",
  "_version": 1,
  "result": "created",
  "_shards": {
    "total": 2,
    "successful": 1,
    "failed": 0
  },
  "created": true
}


it will create a document inside the schema provided by name index name and type provide as type and with id provided 
but if we donot provide the id the elastic search by default add a id but we wont be able to figure out or trace using id .
It is always recommended to use user defined id ....


2.
GET /{index name}/{type}/{id}

It will fetch the document from elastic search store and return if it is available in documen t store under same index and type.

eg : 
GET /vehicles/car/123

result :
{
  "_index": "vehicles",
  "_type": "car",
  "_id": "123",
  "_version": 3,
  "found": true,
  "_source": {
    "make": "Honda",
    "Colour": "Black",
    "HP": 250,
    "milage": 24000,
    "price": 1935.67
  }
}

3.
To fetch only the document inserted in elastic search store;
eg: 
GET /vehicles/car/124/_source

result:
{
  "make": "Honda",
  "Colour": "Black",
  "HP": 2506,
  "milage": 24000,
  "price": 1935.67
}

4.
To check weather the specific document with some id exists or not:

eg 
HEAD /vehicles/car/123

result:
200-OK

5. 
To update the specific document in elastic search (as we know documents are immutable it is not going to  update the specifc field rather it will change the whole document and update the specific filed provided in query with it and reindex the document in elastic search )
eg:
POST /vehicles/car/123/_update
{
  "doc":
  {
    "price":12003.45
  }
}

result:

{
  "_index": "vehicles",
  "_type": "car",
  "_id": "123",
  "_version": 5,
  "result": "updated",
  "_shards": {
    "total": 2,
    "successful": 1,
    "failed": 0
  }
}

6.
Delete a document :When a document is deleted it is marked as deleted but it is not whiped off the disk immediately it will be removed later .

eg:
DELETE vehicles/car/123

result:

{
  "found": true,
  "_index": "vehicles",
  "_type": "car",
  "_id": "123",
  "_version": 6,
  "result": "deleted",
  "_shards": {
    "total": 2,
    "successful": 1,
    "failed": 0
  }
}

7.
Delete a complete index:

eg:
DELETE /vehicles

result:
{
  "acknowledged": true
}



8.
create settings for index 

PUT /customers
{
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 2
  },
  "mappings": {
    
  }
}

it will create the index and type and set the settings as numner of replicas and shards

9.
create the mapping for the field

PUT /customers/_mapping/online
{
  "properties": {
    "name":{
      "type": "text",
      "analyzer": "standard"
    }
  }
}

GET /customers

result:
{
  "customers": {
    "aliases": {},
    "mappings": {
      "online": {
        "properties": {
          "name": {
            "type": "text",
            "analyzer": "standard"
          }
        }
      }
    },
    "settings": {
      "index": {
        "creation_date": "1499237985346",
        "number_of_shards": "2",
        "number_of_replicas": "1",
        "uuid": "nVRg7cDaSO6vDxi0W2cnbg",
        "version": {
          "created": "5040399"
        },
        "provided_name": "customers"
      }
    }
  }
}


10. 
Single step way to create mappings and settings :

PUT /customers
{
 "settings":{
   "number_of_replicas": 1,
   "number_of_shards": 2
   
},
 "mappings": {
  
  "online":{
    "properties": {
    "gender":{
      "type":"text",
      "analyzer": "standard"
    },
    "age":{
      "type":"integer"
    },
    "total_spent":{
      "type": "float"
    },
    "is_new":{
      "type": "boolean"
    },
    "name":{
      "type":"text",
      "analyzer": "standard"
    }
  }
  }
  
}
}


11.
strict mapping for type 

set the field as dynamic as strict to throw an error if extra field get added during indexing .

GET customers/_mapping/online
{
  "dynamic":"strict"
}

if we want to add the document with extra field like address in online customers type 

PUT customers/online/123
{
  "age":23,
  "name": "abhishek suman",
  "gender":"male",
  "total_spent":123.45,
  "is_new":false,
  "address":"fdfsdfdfdsfds"
}

result:
{
  "error": {
    "root_cause": [
      {
        "type": "strict_dynamic_mapping_exception",
        "reason": "mapping set to strict, dynamic introduction of [address] within [online] is not allowed"
      }
    ],
    "type": "strict_dynamic_mapping_exception",
    "reason": "mapping set to strict, dynamic introduction of [address] within [online] is not allowed"
  },
  "status": 400
}

Important::::
Look the elastic search h for the elastic search analyzer .....





Querying the elastic search for searching or query the documents.....(Domain Specific Language)

Seach DSL has two major components ;

1. Query Context 
2. Filter Context 
Both can be used in combination for complex queries....

Query context 
1. Match all documents query;
eg; it will bring al documets as match_all doesnot specify any condition so  all documnets have same relevance score 
GET courses/_search
{
  "query": {
     "match_all": {}
  }
}

2. Match the documents with some match crieteria 
eg:
GET courses/_search
{
  "query": {
     "match": {"name":"computer"}
  }
}

it will bring down all records whose name contain computer and based on relavance score it will do the ranking of documents.


3. 
querying weather field exists in document or not 
eg:
GET courses/_search
{
  "query": {
   "exists":
   {
     "field":"professor.email"
} 
}
}
it will check all document weather field name email inside professor exists or not 

4.
Conditional stmt for and of two attributes 
eg:
GET courses/_search
{
  "query": {
    "bool": {
      "must":
            [{"match": {"name": "computer"}},
             {"match": { "room": "C8"}}]
    }
  }
}
Here must is used for and of two attributes like room and name 


5. Use of must not 
GET courses/_search
{
  "query": {
    "bool": {
      "must":
            [{"match": {"name": "accounting"}},
            {"match": {"room": "e3"}}
             ],
      "must_not": [
        {"match": {
          "professor.name": "bill"
        }}
      ]
    }
  }
} 
6. 
Use of should :
eg 
GET courses/_search
{
  "query": {
    "bool": {
      "must":
            [{"match": {"name": "accounting"}}
             ],
      "must_not": [
        {"match": {"professor.name": "bill"}}
             ],
      "should": [
         {"match": {"room": "e7"}}],
         "minimum_should_match": 1
    }
  }
}

it will search with criteria in should atleast 1 should match

7. 
if we want to match the query from two different fiel d then we can multimatch 
eg:
GET courses/_search
{
  "query": {
    "multi_match": {
      "query": "accounting",
      "fields": ["name","professor.department"]
    }
    }
}
it will query for the documents whose have either name or department has accounting 

8. 
match_phrase : it will chekc for the complete phrase not for partial word it should be complete token not partial one 
GET /courses/_search
{
  "query": {
    "match_phrase": {
      "course_description": "advanced course from the business school taken by final year"
    }
  }
}

it will break the complete string into token and do full string search 
Note: 
it will not work if word is partial 

GET /courses/_search
{
  "query": {
    "match_phrase": {
      "course_description": "advanced course from the business school taken by fi "
    }
  }
}

9.
match_phrase_prefix 
for partial word match 
GET /courses/_search
{
  "query": {
    "match_phrase_prefix": {
      "course_description": "advanced course from the business school taken by fi "
    }
  }
}
it will pick the document on the basis of partial match 


10.
Range query 
GET courses/_search
{
  "query": {
    "range": {
      "students_enrolled": {
        "gte": 10,
        "lte": 20
      }
    }
  }
}
it will  return al documents whose student_enrolled are >=10 and <=20

full fledged example including must ,must_not,should 
GET courses/_search
{
	"query": {
		"bool": {
			"must": [{
				"match": {
					"name": "accounting"
				}
			}],
			"must_not": [{
				"match": {
					"room": "e7"
				}
			}],
			"should": [{
				"range": {
					"students_enrolled": {
						"gte": 10,
						"lte": 20
					}
				}
			}],"minimum_should_match": 1
		}
	}
}

Filter context :
It is almost similar to query dsl but difference is that it caches search data and doesnot provide the relevance score ....
if any query outside filte affect relevance score .

GET courses/_search
{
  "query": {
    "bool": {
      "filter": {
         "bool": {
          "must": [
          {	"range": {
					"students_enrolled": {
						"gte": 12
					}
				}}]
                 }
                },
    "should": [
      {"match": {
        "room": "e3"
      }},
      {"range": {
        "students_enrolled": {
          "gte": 13,
          "lte": 14
        }
      }}
    ],"minimum_should_match": 1
            }
    
          }
}
Any thing outside the filter will effect the relevancy score but if it is vcontained within filter it is not going to impact the score 
eg for boosting using ^ operator which will effect the relevance score 
GET courses/_search
{
  "query": {
    "bool": {
      "filter": {
         "bool": {
          "must": [
          {	"range": {
					"students_enrolled": {
						"gte": 12
					}
				}}]
                 }
                },
    "should": [
      {"match": {
        "room": "e3"
      }},
      {"range": {
        "students_enrolled": {
          "gte": 13,
          "lte": 14
        }
      }},
      {
        "multi_match":{
        "query":"market",
        "fields":["name","course_description^2"]
      }}
    ],"minimum_should_match": 1
            }
    
          }
}

Bulk api for inserting multiple documents at a time :
eg: 
POST /vehicles/cars/_bulk
{ "index": {}}
{ "price" : 10000, "color" : "white", "make" : "honda", "sold" : "2016-10-28", "condition": "okay"}
{ "index": {}}
{ "price" : 20000, "color" : "white", "make" : "honda", "sold" : "2016-11-05", "condition": "new" }
{ "index": {}}
{ "price" : 30000, "color" : "green", "make" : "ford", "sold" : "2016-05-18", "condition": "new" }
{ "index": {}}
{ "price" : 15000, "color" : "blue", "make" : "toyota", "sold" : "2016-07-02", "condition": "good" }
{ "index": {}}
{ "price" : 12000, "color" : "green", "make" : "toyota", "sold" : "2016-08-19" , "condition": "good"}
{ "index": {}}
{ "price" : 18000, "color" : "red", "make" : "dodge", "sold" : "2016-11-05", "condition": "good"  }
{ "index": {}}
{ "price" : 80000, "color" : "red", "make" : "bmw", "sold" : "2016-01-01", "condition": "new"  }
{ "index": {}}
{ "price" : 25000, "color" : "blue", "make" : "ford", "sold" : "2016-08-22", "condition": "new"  }
{ "index": {}}
{ "price" : 10000, "color" : "gray", "make" : "dodge", "sold" : "2016-02-12", "condition": "okay" }
{ "index": {}}
{ "price" : 19000, "color" : "red", "make" : "dodge", "sold" : "2016-02-12", "condition": "good" }
{ "index": {}}
{ "price" : 20000, "color" : "red", "make" : "chevrolet", "sold" : "2016-08-15", "condition": "good" }
{ "index": {}}
{ "price" : 13000, "color" : "gray", "make" : "chevrolet", "sold" : "2016-11-20", "condition": "okay" }
{ "index": {}}
{ "price" : 12500, "color" : "gray", "make" : "dodge", "sold" : "2016-03-09", "condition": "okay" }
{ "index": {}}
{ "price" : 35000, "color" : "red", "make" : "dodge", "sold" : "2016-04-10", "condition": "new" }
{ "index": {}}
{ "price" : 28000, "color" : "blue", "make" : "chevrolet", "sold" : "2016-08-15", "condition": "new" }
{ "index": {}}
{ "price" : 30000, "color" : "gray", "make" : "bmw", "sold" : "2016-11-20", "condition": "good" }

it will insert all documents at a time .


sample query for applying order by and size 
eg:
{
	"size": 5,
	"query": {
		"bool": {
			"must": [{
					"match": {
						"make": "dodge"
					}
				},
				{
					"match": {
						"color": "red"
					}
				}
			]
		}
	},
	"from": 0,
	"sort": [{
		"price": {
			"order": "desc"
		}
	}]
}

*** direct using the _count to get the count of document under some condition 

GET vehicles/cars/_count
{
  "query": {"match": {
    "name": "dodge"
  }}
}
*** to get the avg price for the record filtered on basis of some filter condition 
GET vehicles/cars/_search 
{
  "query": {"match": {
    "make": "dodge"
  }},
  "aggs": {
    "avgprice": {
      "avg": {
        "field": "price"
      }
    }
  }
}

*** query to fetch and apply aggregation over the same with different functions:

GET vehicles/cars/_search
{
  "aggs": {
    "popular_cars": {
      "terms": {
        "field": "make.keyword"
      },
      "aggs": {
        "avg_price": {
          "avg": {
            "field": "price"
          }
        },
        "max_price":{
          "max": {
            "field": "price"
          }
        },
        "min_price":
        {
          "min": {
            "field": "price"
          }
        },
        "count_data":
        {
          "value_count": {
            "field": "make.keyword"
          }
        }
      }
    }
  }
}
*** if we want  to have only summary we need to set the result size to 0

GET vehicles/cars/_search
{
  "size":0, 
  "aggs": {
    "popular_cars": {
      "terms": {
        "field": "make.keyword"
      },
      "aggs": {
        "avg_price": {
          "avg": {
            "field": "price"
          }
        },
        "max_price":{
          "max": {
            "field": "price"
          }
        },
        "min_price":
        {
          "min": {
            "field": "price"
          }
        },
        "count_data":
        {
          "value_count": {
            "field": "make.keyword"
          }
        }
      }
    }
  }
}

**** to get the baisc stats like min,max,avg etc 
we can get it by following query :

GET vehicles/cars/_search
{
  "size":0, 
  "aggs": {
    "popular_cars": {
      "terms": {
        "field": "make.keyword"
      },
      "aggs": {
        "stats_on_price": {
          "stats": {
            "field": "price"
          }
        }
      }
  }
}
}
*** sample query tosearch for all the cars which are sold in given date range and avg price of each make 
GET vehicles/cars/_search
{
	"size": 0,
	"aggs": {
		"popular_cars": {
			"terms": {
				"field": "make.keyword"
			},
			"aggs": {
				"sold_date_ranges": {
					"range": {
						"field": "sold",
						"ranges": [{
							"from": "2016-02-12",
							"to": "2016-11-20"
						}]
					},
					"aggs": {
						"avg_price": {
							"avg": {
								"field": "price"
							}
						}
					}
				}
			}
		}
	}
}


*** query to fetch all types of car on basis of condition and there maximum and minmum price for each car :
GET vehicles/cars/_search
{
	"size": 0,
	"aggs": {
		"car_conditions": {
			"terms": {
				"field": "condition.keyword"
			},
			"aggs": {
				"avg_price": {
					"avg": {
						"field": "price"
					}
				},
				"car_make": {
					"terms": {
						"field": "make.keyword"
					},
					"aggs": {
						"min_price": {
							"min": {
								"field": "price"
							}
						},
						"max_price": {
							"max": {
								"field": "price"
							}
						}
					}
				}

			}
		}
	}
}


GET vehicles/cars/_search
{
	"size": 0,
	"aggs": {
		"car_conditions": {
			"terms": {
				"field": "condition.keyword"
			},"aggs": {
			  "avg_price": {
			    "avg": {
			      "field": "price"
			    }
			  },
			  "car_make":{
			    "terms": {
			      "field": "make.keyword"
			    },"aggs": {
			      "min_price":{
			    "min": {
			      "field": "price"
			    }
			  },
			  "max_price":{
			    "max": {
			      "field": "price"
			    }
			  }
			    }
			  }
			  
			}
		}
	}
}



